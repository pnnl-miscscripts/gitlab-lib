.pnnllib-gitlab-mirror-container-images:
    # Arguments are passed in environment variables
    # CONTAINERS - Newline seperated list of images to mirror
    # CONTAINERS_FILE - Optional artifact filename which lists the desired images to be cached in a multiline format
    # CONTAINER_CONVERT - define if the images must be converted to store in gitlab
    # CONTAINER_PREFIX - extra prefix for the images. Can be used to add a string on the front of an image name or a parent directory in the repository.
    # RETAG - Change the tag or sha of the image. to rename the image from foo:bar to foo:baz, set to "\1:baz"
    image: docker.io/kfox1111/misc:skopeo
    script:
    - |
      set -e
      mkdir -p /etc/gitlab-runner/certs/
      [ "x$CONTAINERS_FILE" != "x" ] && export CONTAINERS="$(cat $CONTAINERS_FILE)"
      echo "Mirroring: $CONTAINERS"
      echo "$CONTAINERS" | while read IMAGE; do
        [ "x$IMAGE" == "x" ] && continue
        NEWNAME=$(echo "$IMAGE" | sed 's@.*/@@g')
        [ "x$RETAG" == "x" ] || NEWNAME=$(echo "$NEWNAME" | sed 's/^\([^@:]*\)\([:@]\)\(.*\)/'"$RETAG"'/')
        mkdir -p /tmp/containers/"$NEWNAME"
        echo Mirroring "$IMAGE" to "$NEWNAME"
        if [ "x$CONTAINER_CONVERT" != "x" ]; then
          set +e
          skopeo inspect \
            docker://"${CI_REGISTRY_IMAGE}/${CONTAINER_PREFIX}$NEWNAME" \
            --raw \
            --cert-dir /etc/gitlab-runner/certs/ \
            --creds "gitlab-ci-token:$CI_JOB_TOKEN" \
            > /dev/null && echo already exists && continue
          set -xe
          skopeo copy \
            --format v2s2 \
            docker://"$IMAGE" \
            dir:/tmp/containers/"$NEWNAME"
          skopeo copy \
            --dest-cert-dir /etc/gitlab-runner/certs/ \
            --dest-creds "gitlab-ci-token:$CI_JOB_TOKEN" \
            dir:/tmp/containers/"$NEWNAME" \
            docker://"${CI_REGISTRY_IMAGE}/${CONTAINER_PREFIX}$NEWNAME"
        else
          skopeo copy \
            docker://"$IMAGE" \
            --dest-cert-dir /etc/gitlab-runner/certs/ \
            --dest-creds "gitlab-ci-token:$CI_JOB_TOKEN" \
            docker://"${CI_REGISTRY_IMAGE}/${CONTAINER_PREFIX}$NEWNAME"
        fi
      done

.pnnllib-gitlab-mirror-chart-to-image:
    # CHART - Name of the chart to mirror
    # REPO - Repository URL to mirror from
    # VERSION - Optional helm chart version to pull
    # CONTAINER_PREFIX - extra prefix for the images. Can be used to add a string on the front of an image name or a parent directory in the repository.
    # PATCH - Optional patch to apply to the chart
    # PATCHLEVEL - Optional patch level to patch. Default 1.
    image:
      name: lachlanevenson/k8s-helm:v3.2.1
      entrypoint: [""]
    script:
    - |
      set -e

      #Copy cert into the ca trust store so that helm chart push will work. (Alpine)
      if [ -f /etc/gitlab-runner/certs/ca.crt ]; then
        cat /etc/gitlab-runner/certs/ca.crt > /usr/local/share/ca-certificates/self.crt
        update-ca-certificates
      fi

      helm repo add myrepo "$REPO"
      helm repo update

      echo Pulling chart.
      if [ "x$VERSION" != "x" ]; then
        helm pull myrepo/"$CHART" --untar --version "$VERSION"
      else
        helm pull myrepo/"$CHART" --untar
      fi

      if [ "x$PATCH" != "x" ]; then
        echo Patching chart
        cd "$CHART"
        PATCHLEVEL="${PATCHLEVEL:-1}"
        patch -p"$PATCHLEVEL" < "../$PATCH"
        cd ..
      fi
      echo Uploading
      VERSION=$(helm show chart "$CHART" | awk '/^version:/{print $2}')
      export HELM_EXPERIMENTAL_OCI=1
      echo "$CI_REGISTRY_PASSWORD" | helm registry login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
      helm chart save "$CHART" "$CI_REGISTRY_IMAGE$CONTAINER_PREFIX:$VERSION"
      helm chart push "$CI_REGISTRY_IMAGE$CONTAINER_PREFIX:$VERSION"

.pnnllib-gitlab-build-container-image:
    # Build an image using Kaniko
    # Arguments are passed in environment variables
    # CONTAINER_PREFIX - extra prefix for the image. Can be used to add a string on the front of an image name or a parent directory in the repository.
    # CONTAINER_TAG - The container tag to use. Defaults to $CI_COMMIT_TAG
    # DOCKERFILE - The name of the dockerfile to use. Defaults to Dockerfile.
    # KANIKO_EXTRA_ARGS - Extra arguments passed to Kaniko. Example, `--build-arg MY_BUILD_VAR=foo`.
    image:
      name: gcr.io/kaniko-project/executor:debug
      entrypoint: [""]
    script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - |
      if [ -f /etc/gitlab-runner/certs/ca.crt ]; then
        cat /etc/gitlab-runner/certs/ca.crt >> /kaniko/ssl/certs/ca-certificates.crt
      fi
    - |
      DOCKERFILE="${DOCKERFILE:-Dockerfile}"
      CONTAINER_TAG="${CONTAINER_TAG:-$CI_COMMIT_TAG}"
      KANIKO_EXTRA_ARGS="${KANIKO_EXTRA_ARGS:-}"
      /kaniko/executor --context "$CI_PROJECT_DIR" --dockerfile "$CI_PROJECT_DIR/$DOCKERFILE" --destination "$CI_REGISTRY_IMAGE${CONTAINER_PREFIX}:$CONTAINER_TAG" $KANIKO_EXTRA_ARGS

.pnnllib-gitlab-load-deploy-token:
    # Load a gitlab deploy token into Kubernetes
    #
    # You must have already created a deploy token with just 'read_registry'
    # permission named 'gitlab-deploy-token' as described here:
    # https://docs.gitlab.com/ee/user/project/deploy_tokens/#creating-a-deploy-token
    #
    # Arguments are passed in environment variables
    #
    # SECRET_NAME - Which secret to load the deploy token into. Defautls to gitlab-registry-token
    image: bitnami/kubectl:1.15.3
    script:
    - |
      SECRET_NAME="${SECRET_NAME:-gitlab-registry-token}"
      kubectl create secret docker-registry "$SECRET_NAME" --docker-server="$CI_REGISTRY" --docker-username="$CI_DEPLOY_USER" --docker-password="$CI_DEPLOY_PASSWORD" --dry-run -o yaml | kubectl apply -f -

