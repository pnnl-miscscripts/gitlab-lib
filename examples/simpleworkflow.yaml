# Example for building a container, mirroring it to a private gitlab project and deploying a workload into Kubernetes.

#Include our standard library
include:
  - remote: 'https://raw.githubusercontent.com/pnnl-miscscripts/gitlab-lib/v1/gitlab-lib.yaml'

variables:
  CONTAINER_TAG: 1.0.0

stages:
- check
- build
- deploy

#Check to see if the image already exists and blocks overwriting an existing image. (New image = new tag, never overwrite, is a best practice.)
verify-new-image:
  extends: .pnnllib-gitlab-verify-new-image
  stage: check
  variables:
    # CONTAINER_PREFIX - extra prefix for the image. Can be used to add a string on the front of an image name or a parent directory in the repository.
    # CONTAINER_TAG - The container tag to use. Defaults to $CI_COMMIT_TAG

#Build and push the container.
build-image:
  extends: .pnnllib-gitlab-build-container-image
  stage: build
  variables:
    # CONTAINER_PREFIX - extra prefix for the image. Can be used to add a string on the front of an image name or a parent directory in the repository.
    # CONTAINER_TAG - The container tag to use. Defaults to $CI_COMMIT_TAG
    # DOCKERFILE - The name of the dockerfile to use. Defaults to Dockerfile.

#Load a secret into the Kubernetes cluster. Note, please follow the steps below to create a deploy token in gitlab before this step will work.
deply-token-to-cluster:
  extends: .pnnllib-gitlab-load-deploy-token
  stage: build
  variables:
    # You must have already created a deploy token with just 'read_registry'
    # permission named 'gitlab-deploy-token', with username 'gitlab-deploy-token' as described here:
    # https://docs.gitlab.com/ee/user/project/deploy_tokens/#creating-a-deploy-token
    #
    # Arguments are passed in environment variables
    #
    # SECRET_NAME - Which secret to load the deploy token into. Defautls to gitlab-registry-token

#Utilize your container
deply-workload:
  stage: deploy
  image: bitnami/kubectl:1.15.3
  script:
  - kubectl apply -f demo-deployment.yaml
